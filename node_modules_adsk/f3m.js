const axios     = require('axios');
const fs        = require('fs');
const settings  = require('../settings.js');
const FormData  = require('form-data');
const utils     = require('./utils');

let headersPLM = {};

function getCustomHeaders() {

    let headers = {
        'Content-Type'  : headersPLM['Content-Type'],
        'Accept'        : headersPLM['Accept'],
        'X-Tenant'      : headersPLM['X-Tenant'],
        'X-user-id'     : headersPLM['X-user-id'],
        'Authorization' : headersPLM['Authorization']       
    }

    return headers;

}


// LOGIN TO AUTODESK PLATFORM SERVICES
// ---------------------------------------------------------------------------------
exports.login = function login(setDefaultHeaders) {

    if(typeof setDefaultHeaders === 'undefined') setDefaultHeaders = true;

    return new Promise(function(resolve, reject) {
    
        let data = {
            'grant_type' : 'client_credentials',
            'scope' : 'data:read'
        }
        
        axios.post('https://developer.api.autodesk.com/authentication/v2/token', data, {
            headers: {
                'accept'        : 'application/json',
                'authorization' : 'Basic ' + btoa(settings.clientId + ':' + settings.clientSecret),
                'content-type'  : 'application/x-www-form-urlencoded'
            }
        }).then(function (response) {
            if (response.status == 200) {               

                if(setDefaultHeaders) {

                    axios.defaults.headers.common['Content-Type']   = 'application/json';
                    axios.defaults.headers.common['Accept']         = 'application/json';
                    axios.defaults.headers.common['X-user-id']      = settings.user;
                    axios.defaults.headers.common['X-Tenant']       = settings.tenant;
                    axios.defaults.headers.common['Authorization']  = 'Bearer ' + response.data.access_token;

                }

                headersPLM['Content-Type']   = 'application/json';
                headersPLM['Accept']         = 'application/json';
                headersPLM['X-user-id']      = settings.user;
                headersPLM['X-Tenant']       = settings.tenant;
                headersPLM['Authorization']  = 'Bearer ' + response.data.access_token;

                console.log('    Login to F3M tenant ' + settings.tenant + ' successful');

                return resolve(headersPLM);

            } else {

                console.log();      
                console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');      
                console.log('             LOGIN FAILED');
                console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'); 
                console.log(); 
                
                console.log(error);

                return reject();

            }

        }).catch(function (error) {
            console.log(error);
        });

    });
    
}


// SCHEMA
// ---------------------------------------------------------------------------------
exports.getFieldSectionId = function getFieldSectionId(wsId, fieldId) {
    
    // Get ID of section that contains defined field

    console.log('    Getting Section ID for field ' + fieldId + ' in workspace ' + wsId); 
    
    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/workspaces/' + wsId + '/sections';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        let sectionId = -1;

        if(response.data.list === null) {

            console.log();
            console.log('    ERROR in getting sections of workspace ' + wsId);
            console.log();

        } else {
        
            for(section of response.data.list.section) {
                
                if(section.hasOwnProperty('field')) {
                    for(field of section.field) {
                    
                        let temp = field.split('/');
                        let id   = temp[temp.length - 1];
                        
                        if(id === fieldId) {
                            sectionId = section.sectionID;
                            break;
                        }
                        
                    }
                }
                
            }
            
            if(sectionId === -1) {
                console.log('    ERROR: Could not find field ' + fieldId + ' in workspace ' + wsId);
            } else {
                console.log('    Sectiond ID of ' + fieldId + ' is ' + sectionId);
            }  

        }
        return sectionId;

    }).catch(function (error) {
        console.log(error.message);
    });
     
}
exports.getWorkspaces = function getWorkspaces() {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces?offset=0&limit=500';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceType = function getWorkspaceType(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId;
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data.type;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceTabs = function getWorkspaceTabs(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/tabs';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceSections = function getWorkspaceSections(wsId) {
    
    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/sections';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        
        return response.data;

    }).catch(function (error) {
        console.log(error.message);
    });
     
}
exports.getWorkspaceSectionsFields = function getWorkspaceSections(wsId) {
    
    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/sections';
    
    let headers = getCustomHeaders();
        headers['Accept'] = 'application/vnd.autodesk.plm.sections.bulk+json';

    return axios.get(url, { 'headers' : headers }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
    });
     
}
exports.getWorkspaceFields = function getWorkspaceFields(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/fields';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return (response.data === '') ? { 'fields' : [] } : response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceGridColumns = function getWorkspaceGridColumns(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/13/fields';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return (response.data === '') ? { 'fields' : [] } : response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceManagedItemsColumns = function getWorkspaceManagedItemsColumns(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/11/fields';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return (response.data === '') ? { 'fields' : [] } : response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceStates = function getWorkspaceStates(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/workflows/1/states';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        let result = [];

        if(typeof response.data !== 'undefined') {
            if(response.data !== '') {
                result = response.data.states;
            }
        }
        
        return result;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceTransitions = function getWorkspaceTransitions(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/workflows/1/transitions';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return (response.data === '') ? [] : response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspaceScripts = function getWorkspaceScripts(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/scripts';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        let result = [];

        if(typeof response.data !== 'undefined') {
            if(response.data !== '') {
                result = response.data.scripts;
            }
        }
        
        return result;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getWorkspacePrintViews = function getWorkspacePrintViews(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/print-views?desc=type&asc=title';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {

        let result = [];

        if(typeof response.data !== 'undefined') {
            if(response.data !== '') {
                result = response.data.links;
            }
        }

        return result;

    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getRelatedWorkspacesBOM = function getRelatedWorkspacesBOM(wsId) {
    
    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/200/related-workspaces';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {

        let result = [];

        if(typeof response.data !== 'undefined') {
            if(response.data !== '') {
                result = response.data.workspaces;
            }
        }
        
        return result;

    }).catch(function (error) {
        console.log(error.message);
    });
     
}
exports.getRelatedWorkspacesGantt = function getRelatedWorkspacesGantt(wsId) {
    
    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/16/related-workspaces';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {

        let result = [];

        if(typeof response.data !== 'undefined') {
            if(response.data !== '') {
                result = response.data.workspaces;
            }
        }
        
        return result;

    }).catch(function (error) {
        console.log(error.message);
    });
     
}
exports.getRelatedWorkspacesRelationships = function getRelatedWorkspacesRelationships(wsId) {
    
    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/10/related-workspaces';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {

        let result = [];

        if(typeof response.data !== 'undefined') {
            if(response.data !== '') {
                result = response.data.workspaces;
            }
        }
        
        return result;

    }).catch(function (error) {
        console.log(error.message);
    });
     
}
exports.getRelatedWorkspacesManagedItems = function getRelatedWorkspacesManagedItems(wsId) {
    
    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/100/related-workspaces';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {

        let result = [];

        if(typeof response.data !== 'undefined') {
            if(response.data !== '') {
                result = response.data.workspaces;
            }
        }

        return result;

    }).catch(function (error) {
        console.log(error.message);
    });
     
}
exports.getPicklists = function getPicklists() {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/setups/picklists';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getPicklist = function getPicklist(uri) {

    return axios.get(uri, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}


// SCRIPTS
exports.getScripts = function getScripts() {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/scripts';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.downloadScript = function downloadScript(scriptId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/scripts/' + scriptId;
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}


// QUERY DATA
// ---------------------------------------------------------------------------------
exports.search = function search(params) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/workspaces/' + params.wsId + '/items/search';
    
    return axios.post(url, {
        'pageNo'      : (typeof params.pageNo === 'undefined') ? 1 : params.pageNo,
        'pageSize'    : (typeof params.pageSize === 'undefined') ? 100 : params.pageSize,
        'logicClause' : (typeof params.logicClause === 'undefined') ? 'AND' : params.logicClause,
        'fields'      : params.fields,
        'filter'      : params.filter,
        'sort'        : params.sort
    }, { 'headers' : headersPLM }).then(function (response) {
        let result = response.data;
        if(result === '') {
            result = {
                'totalResultCount' : 0,
                'row' : []
            }
        }
        return result;
    }).catch(function (error) {
        console.log(error);    
        return [];
    });

}
exports.query = function query(params) {

    let limit    = (typeof params.limit    === 'undefined') ?   100 : params.limit;
    let offset   = (typeof params.offset   === 'undefined') ?     0 : params.offset;
    let revision = (typeof params.revision === 'undefined') ?   '2' : params.revision;
    let bulk     = (typeof params.bulk     === 'undefined') ? false : params.bulk;

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/search-results?limit=' + limit + '&offset=' + offset + '&query=' + params.query;
    
    if(typeof params.wsId !== 'undefined') url += '+AND+(workspaceId%3D' + params.wsId + ')';
    url += '&revision=' + revision;

    
    if(bulk) {

        let headers = getCustomHeaders();
            headers['Accept'] = 'application/vnd.autodesk.plm.items.bulk+json';

        return axios.get(url, { 'headers' : headers }).then(function(response) {
            return response.data;
        }).catch(function(error) {
            console.log(error);
            return '';
        });
    } else {
        return axios.get(url, { 'headers' : headersPLM }).then(function(response) {
            return response.data;
        }).catch(function(error) {
            console.log(error);
            return '';
        });
    }

}
exports.requestReport = function requestReport(reportId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/reports/' + reportId;

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        utils.printError(error.message);
        return false;
    });

}
exports.getMyOutStandingWork = function getMyOutStandingWork(user) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/users/@me/outstanding-work';
    
    let headers = getCustomHeaders();
        headers['X-user-id'] = user;

    return axios.get(url, { 'headers' : headers }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        utils.printError(error.message);
        return false;
    });

}


// TABLEAUS
// ---------------------------------------------------------------------------------
exports.getTableaus = function getTableaus(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/tableaus';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return (response.data === '') ? { 'tableaus' : [] } : response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getTableausByUser = function getTableausByUser(wsId, userName) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/tableaus';
    
    let headers = getCustomHeaders();
        headers['X-user-id'] = userName;

    return axios.get(url, { 'headers' : headers }).then(function (response) {
        return (response.data === '') ? { 'tableaus' : [] } : response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.createTableauByUser = function createTableauByUser(wsId, userName, body) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/tableaus';
    
    let headers = getCustomHeaders();
        headers['Content-Type'] = 'application/vnd.autodesk.plm.meta+json';
        headers['X-user-id'] = userName;

    return axios.post(url, body, { 'headers' : headers }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.updateTableauByUser = function updateTableauByUser(link, userName, body) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net' + link;
    
    let headers = getCustomHeaders();
        headers['Content-Type'] = 'application/vnd.autodesk.plm.meta+json';
        headers['X-user-id'] = userName;

    return axios.put(url, body, { 'headers' : headers }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getTableau = function getTableau(link) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/' + link;
    
    let headers = getCustomHeaders();
        headers['Accept'] = 'application/vnd.autodesk.plm.meta+json';

    return axios.get(url, { 'headers' : headers }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}


// RECORDS MANAGEMENT
// ---------------------------------------------------------------------------------
exports.createItem = function createItem(params) {

    return new Promise(function(resolve, reject) {

        let prefix   = '/api/v3/workspaces/' + params.wsId;
        let url      = 'https://' + settings.tenant + '.autodeskplm360.net' + prefix + '/items';
        let sections = [];
                
        for(section of params.sections) {
    
            let sect = {
                'link'   : prefix + '/sections/' + section.id,
                'fields' : []
            }
    
            for(field of section.fields) {
                sect.fields.push({
                    '__self__'  : prefix + '/views/1/fields/' + field.fieldId,
                    'value'     : field.value
                });
            }
    
            sections.push(sect);
    
        }

        axios.post(url, {
            'sections' : sections
        }, { 'headers' : headersPLM }).then(function (response) { 
            return resolve(response.headers.location);
        }).catch(function (error) {
            console.log(error.message);
            return reject(error.message);
        });
        
    });

}
exports.archiveItem = function archiveItem(link) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net' + link + '?deleted=true';

    return axios.patch(url, {}, { 'headers' : headersPLM }).then(function () {
        return true;
    }).catch(function (error) {
        console.log(error);
        return false;
    });

}


// ITEM DETAILS
// ---------------------------------------------------------------------------------
exports.getDetails = function getDetails(wsId, dmsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/items/' + dmsId;
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.edit = function edit(params) {

    let prefix   = (typeof params.link !== 'undefined') ? params.link : '/api/v3/workspaces/' + params.wsId + '/items/' + params.dmsId;
    let url      = 'https://' + settings.tenant + '.autodeskplm360.net' + prefix;
    let sections = [];

    for(section of params.sections) {

        let sect = {
            'link'   : prefix + '/views/1/sections/' + section.id,
            'fields' : []
        }

        for(field of section.fields) {

            sect.fields.push({
                '__self__'  : prefix + '/views/1/fields/' + field.fieldId,
                'urn'       : 'urn:adsk.plm:tenant.workspace.item.view.field:' + settings.tenant.toUpperCase() + '.' + params.wsId + '.' + params.dmsId + '.1.' + field.fieldId,
                'value'     : field.value
            });

        }

        sections.push(sect);

    }

    return axios.patch(url, {
        'sections' : sections
    }, { 'headers' : headersPLM }).then(function () {
        return true;
    }).catch(function (error) {
        console.log(error.message);
        return false;
    });

}
exports.uploadImage = function uploadImage(params) {

    return new Promise(function(resolve, reject) {

        let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + params.wsId + '/items/' + params.dmsId;
        let formData = new FormData();

        formData.append(params.fieldId, fs.createReadStream(params.folder + '/' + params.fileName), {
            contentType: 'application/octet-stream'
        });      
    
        axios.get(url).then(function (response) {
           
            formData.append('itemDetail', JSON.stringify(response.data), {
                filename    : 'blob',
                contentType : 'application/json'
            });

            let custHeaders                   = formData.getHeaders();
                custHeaders['X-user-id']      = settings.user;
                custHeaders['X-Tenant']       = settings.tenant;
                custHeaders['Authorization']  = headersPLM['Authorization'];

            axios.put(url, formData, {
                'headers' : custHeaders
            }).then(function (response) {
                // if(response.status === 204) {
                //     console.log('    Image upload successful');
                // } else {
                //    console.log('    Status code : ' + response.status); 
                // }
                return resolve();
            }).catch(function (error) {
                console.log(error);
                return reject();
            });
                        
        }).catch(function (error) {
            console.log(error);    
        });

    });

}


// ITEM BOM
// ---------------------------------------------------------------------------------
exports.getBOMViews = function getBOMViews(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/5';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getFlatBOM = function getBOMViews(params) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + params.wsId + '/items/' + params.dmsId + '/bom-items?effectiveDate=2020-06-25&revisionBias=release&rootId=' + params.dmsId + '&viewDefId=' + params.viewId;
    
    let headers = getCustomHeaders();
        headers['Accept'] = 'application/vnd.autodesk.plm.bom.flat.bulk+json';

    return axios.get(url, { 'headers' : headers}).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.addBomItem = function addBomItem(params) {

    return new Promise(function(resolve, reject) {
    
        let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + params.wsIdParent + '/items/' + params.dmsIdParent + '/bom-items';
        let isPinned = (typeof params.pinned === 'undefined') ? false : params.pinned;

        let bomEntry = {
            'quantity'  : params.qty,
            'isPinned'  : isPinned,
            'item'      : { 
                'link'  : '/api/v3/workspaces/' + params.wsIdChild + '/items/' + params.dmsIdChild
            }
        };

        if(typeof params.number !== 'undefined') bomEntry.itemNumber = params.number;

        axios.post(url, bomEntry, { 'headers' : headersPLM }).then(function(response) {
            return resolve(response.data);
        }).catch(function(error) {
            console.log(error);
        });

    });

}


// ITEM ATTACHMENTS
// ---------------------------------------------------------------------------------
exports.getAttachments = function getAttachments(wsId, dmsId, link) {

    if(wsId !== null) { if(dmsId !== null) {
        link = '/api/v3/workspaces/' + wsId + '/items/' + dmsId;
    }}

    let url = 'https://' + settings.tenant + '.autodeskplm360.net' + link + '/attachments?asc=name';
    
    let headers = getCustomHeaders();
        headers['Accept'] = 'application/vnd.autodesk.plm.attachments.bulk+json';

    return axios.get(url, { 'headers' : headers }).then(function (response) {
        return (response.data === '') ? { 'attachments' : [] } : response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.uploadFile = function uploadFile(link, path, fileName, folderName, updateExisting) {
    
    if(typeof updateExisting === 'undefined') updateExisting = true;

    return new Promise(function(resolve, reject) {

        let prefix = 'https://' + settings.tenant + '.autodeskplm360.net/' + link;

        getAttachments(prefix, function(attachments) {
            parseAttachments(prefix, path, fileName, folderName, attachments, updateExisting, function() {
                return resolve();
            });

        });

    });

}
function getAttachments(prefix, callback) {
    
    let url = prefix + '/attachments?asc=name';
    
    let headers = getCustomHeaders();
        headers['Accept'] = 'application/vnd.autodesk.plm.attachments.bulk+json';

    axios.get(url, { 'headers' : headers }).then(function (response) {
        callback(response);
    }).catch(function (error) {
        console.log(' > getAttachments ERROR');
        console.log(error.message);
    });  
    
}
function parseAttachments(prefix, path, fileName, folderName, attachments, updateExisting, callback) {

    let folderId    = '';
    let fileId      = '';

    if(attachments.status === 200) {
        for(attachment of attachments.data.attachments) {
            if(attachment.name === fileName) {
                fileId = attachment.id;
            } 
            if(attachment.folder !== null) {
                if(attachment.folder.name === folderName) {
                    folderId = { id : attachment.folder.id };
                }
            }
        }
    }

    if(fileId !== '') {
        if(updateExisting) {
            createVersion(prefix, path, fileName, folderId, fileId, function() { callback(); });
        }
    } else if(folderName === '') {
        createFile(prefix, path, fileName, null, function() { callback(); });
    } else if(folderId === '') {
        createFolder(prefix, folderName, function(data) {
            createFile(prefix, path, fileName, {'id':data}, function() { callback(); });
        });
    } else {
        createFile(prefix, path, fileName, folderId, function() { callback(); });
    }
    
}
function createFolder(prefix, folderName, callback) {
    
    let url = prefix + '/folders';
    
    axios.post(url, {
        'folderName' : folderName 
    }, { 'headers' : headersPLM }).then(function (response) {
        
        let location    = response.headers.location;
        let temp        = location.split('/');
        let folderId    = temp[temp.length - 1];
        
        callback(folderId);

    }).catch(function (error) {
        console.log(error.message);
    }); 
    
}
function createFile(prefix, path, fileName, folderId, callback) {
    
    let stats = fs.statSync(path + '/' + fileName);
    let url   = prefix + '/attachments';
       
    axios.post(url, {
        'description'   : fileName,
        'name'          : fileName,
        'resourceName'  : fileName,
        'folder'        : folderId,
        'size'          : stats.size
    }, { 'headers' : headersPLM }).then(function (response) {
        prepareUpload(response.data, function() {
            uploadFile(path, fileName, response.data, function(fileId) {
                setStatus(prefix, fileId, function() {
                    callback();
                });
            });          
        });
    }).catch(function (error) {
        console.log(error.message);
    }); 
    
}
function prepareUpload(fileData, callback) {

    axios({
        method  : 'options',
        url     :  fileData.url, 
        headers : {
            'Accept'            : '*/*',
            'Accept-Encoding'   : 'gzip, deflate, br',
            'Accept-Language'   : 'en-US,en;q=0.9,de;q=0.8,en-GB;q=0.7',
            'Access-Control-Request-Headers': 'content-type,x-amz-meta-filename',
            'Access-Control-Request-Method' : 'PUT',
            'Host'              : 'plm360-aws-useast.s3.amazonaws.com',
            'Origin'            : 'https://' + settings.tenant + '.autodeskplm360.net',
            'Sec-Fetch-Mode'    : 'cors',
            'Sec-Fetch-Site'    : 'cross-site'
        }
    }).then(function (response) {
        callback();
    }).catch(function (error) {
        console.log(error.message);
    }); 
    
}
function uploadFile(path, fileName, fileData, callback) {
    
    axios.put(fileData.url, fs.readFileSync(path + '/' + fileName),{
        headers : fileData.extraHeaders
    }).then(function (response) {
        callback(fileData.id);
    }).catch(function (error) {
        console.log(error);
        console.log(error.message);
    }); 
    
}
function setStatus(prefix, fileId, callback) {

    let url = prefix + '/attachments/' + fileId;

    axios.patch(url, {
        status : {
            'name' : 'CheckIn'
        }
    }, { 'headers' : headersPLM }).then(function (response) {
        callback();
    }).catch(function (error) {
        console.log(error.message);
    }); 
    
}
function createVersion(prefix, path, fileName, folderId, fileId, callback) {
    
    let stats   = fs.statSync(path + '/' + fileName);
    let url     = prefix + '/attachments/' + fileId;
    
    if(folderId === '') folderId = null;
    
    axios.post(url, {
        'description'   : fileName,
        'fileName'      : fileName,
        'name'          : fileName,
        'resourceName'  : fileName,
        'folder'        : folderId,
        'fileTypeString': 'file/type',
        'size'          : stats['size']
    }, { 'headers' : headersPLM }).then(function (response) {
        prepareUpload(response.data, function() {
            uploadFile(path, fileName, response.data, function(fileId) {
                setStatus(prefix, fileId, function() {
                    callback();
                });
            });
        });
    }).catch(function (error) {
        console.log(error.message);
    });    
    
}


// ITEM GRID DATA
// ---------------------------------------------------------------------------------
exports.getGridRows = function getGridRows(wsId, dmsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/items/' + dmsId + '/views/13/rows';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.addGridRow = function addGridRow(params) {
    
    let url     = 'https://' + settings.tenant + '.autodeskplm360.net' + params.link + '/views/13/rows';    
    let rowData = [];
    let self    = params.link.split('/');
    let wsId    = self[4];

    for(field of params.row) {
        rowData.push({
            '__self__' : '/api/v3/workspaces/' + wsId + '/views/13/fields/' + field.fieldId,
            'urn'      : 'urn:adsk.plm:tenant.workspace.view.field:ADSKDICKMAS.' + wsId + '.13.ID',
            'value'    : field.value
        });
    }

    return axios.post(url, {
        'rowData' : rowData
    }, { 'headers' : headersPLM }).then(function() {
        return true;
    }).catch(function(error) {
        console.log(error);
        return false;
    });

};


// ITEM PROJECT
// ---------------------------------------------------------------------------------
exports.getProject = function getProject(wsId, dmsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/items/' + dmsId + '/views/16';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}


// ITEM MANAGED ITEMS
// ---------------------------------------------------------------------------------
exports.getManagedItems = function getManagedItems(wsId, dmsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/items/' + dmsId + '/views/11';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getManagedItemsColumns = function getManagedItems(wsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/views/11/fields';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}


// ITEM MILESTONES
// ---------------------------------------------------------------------------------
exports.getMilestones = function getMilestones(wsId, dmsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/items/' + dmsId + '/views/17?asc=date';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}


// ITEM CHANGE LOG
// ---------------------------------------------------------------------------------
exports.getChangeLog = function getChangeLog(wsId, dmsId) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + wsId + '/items/' + dmsId + '/logs?desc=timeStamp&limit=100&offset=0';
    
    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}


// Perform Workflow Transition
exports.performTransition = function performTransition(params) {

    let url   = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/workspaces/' + params.wsId + '/items/' + params.dmsId + '/workflows/1/transitions';
    
    let headers = getCustomHeaders();
        headers['content-location'] = '/api/v3/workspaces/' + params.wsId + '/workflows/1/transitions/' + params.transitionId;

    return axios.post(url, {
        'comment' : (typeof params.comment === 'undefined') ? 'Transitioned by external program' : params.comment
    },{ 'headers' : headers }).then(function () {
       return true;
    }).catch(function (error) {
        if(error.statusCode === 303) {
            return true;
        } else {
            console.log(error);
            return false;
        }
    });

}


// SECURITY
// ---------------------------------------------------------------------------------
exports.getPermissions = function getPermissions() {

    return axios.get('https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/permissions', {
        'headers' : headersPLM
    }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });
        
}
exports.getRolesV1 = function getRolesV1() {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/roles';

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getGroupsV1 = function getGroupsV1() {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/groups';

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getUsersV1 = function getUsersV1() {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/rest/v1/users';

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getRoles = function getRoles() {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/roles';

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getGroups = function getGroups(params) {

    let offset = 0;
    let limit  = 500;

    if(typeof params !== 'undefined') {
        if(typeof params.offset !== 'undefined') offset = 0;
        if(typeof params.limit !== 'undefined') oflimitfset = 0;

    }

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/groups?offset=' + offset + '&limit=' + limit;

    let headers = getCustomHeaders();
        headers['Accept'] = 'application/vnd.autodesk.plm.groups.bulk+json';
   
    return axios.get(url, { 'headers' : headers }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getUsers = function getUsers(params) {

    if(typeof params === 'undefined') params = {};

    let offset      = (typeof params.offset             === 'undefined') ?     0 : params.offset;
    let limit       = (typeof params.limit              === 'undefined') ?   100 : params.limit;
    let admin       = (typeof params.includeTenantAdmin === 'undefined') ?  true : params.includeTenantAdmin;
    let mappedOnly  = (typeof params.mappedOnly         === 'undefined') ? false : params.mappedOnly;
    let activeOnly  = (typeof params.activeOnly         === 'undefined') ? false : params.activeOnly;

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/users';
        url += '?limit=' + limit;
        url += '&offset=' + offset;
        url += '&includeAlertView=false'
        url += '&includeTenantAdmin=' + admin
        url += '&mappedOnly=' + mappedOnly
        url += '&activeOnly=' + activeOnly;

    let headers = getCustomHeaders();
        headers['Accept'] = 'application/vnd.autodesk.plm.users.bulk+json';

    return axios.get(url, { 'headers' : headers }).then(function (response) {
        let result = (response.data === '') ? { 'items' : [] } : response.data;
        return result;
    }).catch(function (error) {
        console.log(error.message);
        return { 'items' : [] };
    });

}
exports.getUserDetails = function getUserDetails(link) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net' + link;

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return(response.data);
    }).catch(function (error) {
        console.log(error);
    });

}
exports.addUser = function addUser(params) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/users';

    let body = {
        'email'         : params.email,
        'thumbnailPref' : 'Yes',
        'uomPref'       : params.uom,
        'timezone'      : params.timezone       
    }

    if(params.license !== '') {
        body.licenseType = {
            'licenseCode': params.license
        }
    }

    return axios.post(url, body, { 'headers' : headersPLM }).then(function (response) {
        return response.headers.location;
    }).catch(function (error) {
        console.log(error.message);
        return 'error';
    });

}
exports.assignGroups = function assignGroups(link, urns) {

    let url = link + '/groups';
    
    return axios.post(url, urns, { 'headers' : headersPLM }).then(function () {
        return true;
    }).catch(function (error) {
        console.log(error.message);
        return false;
    });

}
exports.setUserStatus = function setUserStatus(params) {

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/users/' + params.userId;
    
    let headers = getCustomHeaders();
        headers['Content-Type'] = 'application/json-patch+json';
   
    return axios.patch(url,  [{
        'op'    : 'replace',
        'path'  : '/userStatus',
        'value' : params.status
    }], { 'headers' : headers }).then(function (response) {
        return response.status;
    }).catch(function (error) {
        console.log(error.message);
        return false;
    });

}


// LOGS
// ---------------------------------------------------------------------------------
exports.getSetupLog = function getSetupLog(params) {

    if(typeof params === 'undefined') params = {};

    let offset = (typeof params.offset === 'undefined') ? 0 : params.offset;
    let limit  = (typeof params.limit === 'undefined') ? 0 : params.limit;

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/tenants/' + settings.tenant.toUpperCase() + '/setup-logs?offset=' + offset + '&limit=' + limit;

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response.data;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}
exports.getSystemLog = function getSystemLog(params) {

    if(typeof params === 'undefined') params = {};

    let offset = (typeof params.offset === 'undefined') ? 0 : params.offset;
    let limit  = (typeof params.limit === 'undefined') ? 0 : params.limit;

    let url = 'https://' + settings.tenant + '.autodeskplm360.net/api/v3/tenants/' + settings.tenant.toUpperCase() + '/system-logs?offset=' + offset + '&limit=' + limit;

    return axios.get(url, { 'headers' : headersPLM }).then(function (response) {
        return response;
    }).catch(function (error) {
        console.log(error.message);
        return [];
    });

}